import json
import random
from typing import List, Dict

import streamlit as st
import pyperclip

# ==============================================================================
# üß© LOGIQUE DU G√âN√âRATEUR (Fonctions de Callback)
# ==============================================================================

def generate_password() -> None:
    """
    G√©n√®re un mot de passe al√©atoire bas√© sur les options s√©lectionn√©es.

    G√®re la v√©rification qu'au moins un type de caract√®re est s√©lectionn√©
    et affiche une notification temporaire ('toast') si ce n'est pas le cas.
    """
    
    # R√©initialise le message d'erreur persistant (utilis√© pour les erreurs JSON)
    st.session_state["error_message"] = ""

    # V√©rifie si aucune des options de caract√®re n'est coch√©e
    if not (
        st.session_state["use_lowercase"] or
        st.session_state["use_uppercase"] or
        st.session_state["use_digits"] or
        st.session_state["use_symbols"]
        ):
        # Affiche un toast pour informer l'utilisateur qu'il manque des options
        st.toast("‚ö†Ô∏è Veuillez choisir au moins une option de caract√®re pour g√©n√©rer le mot de passe.")
        # Efface tout mot de passe pr√©c√©dent
        st.session_state["password_output"] = ""
        # Arr√™te l'ex√©cution de la fonction
        return
    
    # Tente de charger les donn√©es des caract√®res √† partir du fichier JSON
    try:
        # Ouvre le fichier de donn√©es en mode lecture
        with open("data.json", "r") as f:
            # Charge le contenu JSON dans la variable data (typ√© comme un dictionnaire g√©n√©rique)
            data: Dict[str, List[str]] = json.load(f)
    except Exception as e:
        # En cas d'erreur (fichier manquant, JSON invalide, etc.), d√©finit le message d'erreur persistant
        st.session_state["error_message"] = f"Erreur de donn√©es: Impossible de charger 'data.json'. ({e})"
        # Efface tout mot de passe pr√©c√©dent
        st.session_state["password_output"] = ""
        # Arr√™te l'ex√©cution
        return
        
    # Initialise une liste pour stocker tous les caract√®res possibles
    options: List[str] = []
    
    # Ajoute les lettres minuscules si l'option est coch√©e
    if st.session_state["use_lowercase"]:
        # Utilise .get() pour r√©cup√©rer la liste, ou une liste vide si la cl√© n'existe pas
        options.extend(data.get("latin_lower_alphabet", []))

    # Ajoute les lettres majuscules si l'option est coch√©e
    if st.session_state["use_uppercase"]:
        options.extend(data.get("latin_upper_alphabet", []))

    # Ajoute les chiffres si l'option est coch√©e
    if st.session_state["use_digits"]:
        options.extend(data.get("arabic_numerals", []))

    # Ajoute les symboles si l'option est coch√©e
    if st.session_state["use_symbols"]:
        options.extend(data.get("punctuation_characters", []))

    # V√©rifie si la liste des options est vide (erreur dans data.json malgr√© les options coch√©es)
    if not options:
        # D√©finit un message d'erreur sp√©cifique pour les donn√©es (persistant)
        st.session_state["error_message"] = "Erreur de donn√©es : Les options s√©lectionn√©es ne contiennent aucun caract√®re valide dans data.json."
        # Efface tout mot de passe pr√©c√©dent
        st.session_state["password_output"] = ""
        # Arr√™te l'ex√©cution
        return

    # R√©cup√®re la longueur d√©sir√©e du mot de passe (typ√© comme un entier)
    lenght: int = st.session_state["password_length"]

    # G√©n√®re le mot de passe en tirant al√©atoirement des caract√®res dans la liste `options`
    password: str = "".join(random.choices(options, k=lenght))

    # Met √† jour le champ de sortie avec le mot de passe g√©n√©r√©
    st.session_state["password_output"] = password

def copy_password() -> None:
    """
    Copie le mot de passe g√©n√©r√© dans le presse-papiers et affiche un toast.
    """
    # R√©cup√®re le mot de passe s'il existe (typ√© comme une cha√Æne de caract√®res ou None)
    password_to_copy: str | None = st.session_state.get("password_output")

    # V√©rifie si un mot de passe existe
    if password_to_copy:
        try:
            # Tente de copier le mot de passe
            pyperclip.copy(password_to_copy)
            # Affiche un message de succ√®s (toast)
            st.toast("Mot de passe copi√© dans le presse-papiers! üìã", icon="‚úÖ")
        except pyperclip.PyperclipException:
            # Affiche un message d'erreur si la copie √©choue
            st.toast("Impossible de copier dans le presse-papiers (Pyperclip non support√©).", icon="‚ùå")
    else:
        # Affiche un avertissement si le champ est vide
        st.toast("Rien √† copier : g√©n√©rez un mot de passe d'abord.", icon="‚ÑπÔ∏è")

def reset_configuration() -> None:
    """
    R√©initialise toutes les options et le mot de passe g√©n√©r√© aux valeurs par d√©faut et affiche un toast
    """
    # R√©initialise les lettres minuscules (coch√©)
    st.session_state["use_lowercase"] = True
    # R√©initialise les lettres majuscules (coch√©)
    st.session_state["use_uppercase"] = True
    # R√©initialise les chiffres (coch√©)
    st.session_state["use_digits"] = True
    # R√©initialise les symboles (coch√©)
    st.session_state["use_symbols"] = True
    # R√©initialise la longueur du mot de passe √† 16
    st.session_state["password_length"] = 16
    # Efface le mot de passe affich√©
    st.session_state["password_output"] = ""
    # Efface tout message d'erreur r√©siduel
    st.session_state["error_message"] = ""

    # Affiche un message de succ√®s (toast)
    st.toast("R√©initialisation effectu√©e.", icon="üëç")


# ==============================================================================
# üñ•Ô∏è INTERFACE STREAMLIT
# ==============================================================================

# Configure la page Streamlit
st.set_page_config(
    page_title="G√©n√©rateur de Mot de Passe",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# --- INITIALISATION DES VARIABLES DU SESSION STATE ---
# C'est la solution pour √©viter le conflit "default value vs Session State API".
# On initialise les valeurs par d√©faut si elles ne sont pas d√©j√† pr√©sentes.

# Initialise l'√©tat pour le message d'erreur
if "error_message" not in st.session_state:
    st.session_state["error_message"] = ""

# Initialise l'√©tat des checkboxes (Doit correspondre aux valeurs par d√©faut souhait√©es)
if "use_lowercase" not in st.session_state:
    st.session_state["use_lowercase"] = True
if "use_uppercase" not in st.session_state:
    st.session_state["use_uppercase"] = True
if "use_digits" not in st.session_state:
    st.session_state["use_digits"] = True
if "use_symbols" not in st.session_state:
    st.session_state["use_symbols"] = True
if "password_length" not in st.session_state:
    st.session_state["password_length"] = 16
if "password_output" not in st.session_state:
    st.session_state["password_output"] = ""
# ----------------------------------------------------

# Affiche le titre principal de l'application
st.title("üõ°Ô∏è G√©n√©rateur de Mot de Passe")

# Ajoute un s√©parateur visuel
st.divider()

# Affiche le sous-titre pour les options du mot de passe
st.subheader("Options du mot de passe")

# Cr√©e un placeholder (conteneur vide) pour afficher le message d'erreur (pour les erreurs JSON/data.json)
message_placeholder: st.delta_generator.DeltaGenerator = st.empty()

# Cr√©e deux colonnes pour aligner les checkboxes
col1, col2 = st.columns(2)

with col1:
    # Checkbox pour les minuscules. La valeur est tir√©e du Session State.
    st.checkbox("Lettres latines minuscules (a-z)", key="use_lowercase")
    # Checkbox pour les chiffres. La valeur est tir√©e du Session State.
    st.checkbox("Chiffres arabes (0-9)", key="use_digits")

with col2:
    # Checkbox pour les majuscules. La valeur est tir√©e du Session State.
    st.checkbox("Lettres latines majuscules (A-Z)", key="use_uppercase")
    # Checkbox pour les symboles. La valeur est tir√©e du Session State.
    st.checkbox("Caract√®res sp√©ciaux (!@#...)", key="use_symbols")

# Si un message d'erreur est pr√©sent dans l'√©tat de session, l'afficher dans le placeholder
if st.session_state["error_message"]:
    with message_placeholder.container():
        # Affiche le message d'erreur format√© par Streamlit
        st.error(st.session_state["error_message"])

# Ajoute un s√©parateur visuel
st.divider()

# Affiche le sous-titre pour la longueur du mot de passe
st.subheader("Longueur du mot de passe")

# Slider pour la s√©lection de la longueur du mot de passe.
st.slider(
    "lenght",
    min_value=12,
    max_value=100,
    step=1,
    key="password_length",
    label_visibility="collapsed" # Cache l'√©tiquette par d√©faut
)

# Ajoute un s√©parateur visuel
st.divider()

# Affiche le sous-titre pour le mot de passe g√©n√©r√©
st.subheader("Mot de passe g√©n√©r√©")

# Champ de texte pour afficher le mot de passe.
st.text_input(
    "password", 
    key="password_output", 
    type="password",
    label_visibility="collapsed" # Cache l'√©tiquette par d√©faut
)

# Ajoute un s√©parateur visuel
st.divider()

# Cr√©e trois colonnes pour les boutons d'action
col_btn_1, col_btn_2 , col_btn_3= st.columns(3)

with col_btn_1:
    # Bouton G√©n√©rer, appelle `generate_password` au clic
    st.button(
        "‚ú® G√©n√©rer", 
        key="generate_button", 
        width="stretch", 
        type="primary", 
        on_click=generate_password
    )

with col_btn_2:
    # Bouton Copier, appelle `copy_password` au clic
    st.button(
        "üìã Copier", 
        key="copy_button", 
        width="stretch", 
        type="secondary", 
        on_click=copy_password
    )

with col_btn_3:
    # Bouton R√©initialiser, appelle `reset_configuration` au clic
    st.button(
        "üîß R√©initialiser", 
        key="reset_button", 
        width="stretch", 
        type="secondary", 
        on_click=reset_configuration
    )